
Binary Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000079a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000079a  0000082e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800068  00800068  00000836  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000836  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000866  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003c7  00000000  00000000  0000089e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000142  00000000  00000000  00000c65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001da  00000000  00000000  00000da7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  00000f84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ff  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000402  00000000  00000000  00001267  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001669  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 00 02 	call	0x400	; 0x400 <main>
  8a:	0c 94 cb 03 	jmp	0x796	; 0x796 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <encodeLed>:
	PORTA ^= 0xff;
	PORTC ^= 1<<2 | 1<<1 | 1;
	PORTC ^= 1<<2 | 1<<1 | 1;
}

void encodeLed(void){
  92:	2f 92       	push	r2
  94:	3f 92       	push	r3
  96:	4f 92       	push	r4
  98:	5f 92       	push	r5
  9a:	6f 92       	push	r6
  9c:	7f 92       	push	r7
  9e:	8f 92       	push	r8
  a0:	9f 92       	push	r9
  a2:	af 92       	push	r10
  a4:	bf 92       	push	r11
  a6:	cf 92       	push	r12
  a8:	df 92       	push	r13
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	0f 93       	push	r16
  b0:	1f 93       	push	r17
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	6a 97       	sbiw	r28, 0x1a	; 26
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	f8 94       	cli
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t sz = sekunde / 10;
  c6:	20 91 6a 00 	lds	r18, 0x006A
  ca:	30 91 6b 00 	lds	r19, 0x006B
  ce:	ad ec       	ldi	r26, 0xCD	; 205
  d0:	bc ec       	ldi	r27, 0xCC	; 204
  d2:	0e 94 bc 03 	call	0x778	; 0x778 <__umulhisi3>
  d6:	8c 01       	movw	r16, r24
  d8:	16 95       	lsr	r17
  da:	07 95       	ror	r16
  dc:	16 95       	lsr	r17
  de:	07 95       	ror	r16
  e0:	16 95       	lsr	r17
  e2:	07 95       	ror	r16
	uint8_t se = sekunde % 10;
  e4:	e0 91 6a 00 	lds	r30, 0x006A
  e8:	f0 91 6b 00 	lds	r31, 0x006B
  ec:	9f 01       	movw	r18, r30
  ee:	0e 94 bc 03 	call	0x778	; 0x778 <__umulhisi3>
  f2:	96 95       	lsr	r25
  f4:	87 95       	ror	r24
  f6:	96 95       	lsr	r25
  f8:	87 95       	ror	r24
  fa:	96 95       	lsr	r25
  fc:	87 95       	ror	r24
  fe:	9c 01       	movw	r18, r24
 100:	22 0f       	add	r18, r18
 102:	33 1f       	adc	r19, r19
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	82 0f       	add	r24, r18
 112:	93 1f       	adc	r25, r19
 114:	e8 1b       	sub	r30, r24
 116:	f9 0b       	sbc	r31, r25
	
	uint8_t mz = minute / 10;
 118:	20 91 66 00 	lds	r18, 0x0066
 11c:	30 91 67 00 	lds	r19, 0x0067
 120:	0e 94 bc 03 	call	0x778	; 0x778 <__umulhisi3>
 124:	96 95       	lsr	r25
 126:	87 95       	ror	r24
 128:	96 95       	lsr	r25
 12a:	87 95       	ror	r24
 12c:	96 95       	lsr	r25
 12e:	87 95       	ror	r24
 130:	9a 8f       	std	Y+26, r25	; 0x1a
 132:	89 8f       	std	Y+25, r24	; 0x19
	uint8_t me = minute % 10;
 134:	40 91 66 00 	lds	r20, 0x0066
 138:	50 91 67 00 	lds	r21, 0x0067
 13c:	9a 01       	movw	r18, r20
 13e:	0e 94 bc 03 	call	0x778	; 0x778 <__umulhisi3>
 142:	96 95       	lsr	r25
 144:	87 95       	ror	r24
 146:	96 95       	lsr	r25
 148:	87 95       	ror	r24
 14a:	96 95       	lsr	r25
 14c:	87 95       	ror	r24
 14e:	9c 01       	movw	r18, r24
 150:	22 0f       	add	r18, r18
 152:	33 1f       	adc	r19, r19
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	82 0f       	add	r24, r18
 162:	93 1f       	adc	r25, r19
 164:	48 1b       	sub	r20, r24
 166:	59 0b       	sbc	r21, r25
	
	uint8_t hz = stunde / 10;
 168:	20 91 64 00 	lds	r18, 0x0064
 16c:	30 91 65 00 	lds	r19, 0x0065
 170:	0e 94 bc 03 	call	0x778	; 0x778 <__umulhisi3>
 174:	4c 01       	movw	r8, r24
 176:	96 94       	lsr	r9
 178:	87 94       	ror	r8
 17a:	96 94       	lsr	r9
 17c:	87 94       	ror	r8
 17e:	96 94       	lsr	r9
 180:	87 94       	ror	r8
	uint8_t he = stunde % 10;
 182:	60 90 64 00 	lds	r6, 0x0064
 186:	70 90 65 00 	lds	r7, 0x0065
 18a:	93 01       	movw	r18, r6
 18c:	0e 94 bc 03 	call	0x778	; 0x778 <__umulhisi3>
 190:	96 95       	lsr	r25
 192:	87 95       	ror	r24
 194:	96 95       	lsr	r25
 196:	87 95       	ror	r24
 198:	96 95       	lsr	r25
 19a:	87 95       	ror	r24
 19c:	9c 01       	movw	r18, r24
 19e:	22 0f       	add	r18, r18
 1a0:	33 1f       	adc	r19, r19
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	82 0f       	add	r24, r18
 1b0:	93 1f       	adc	r25, r19
 1b2:	68 1a       	sub	r6, r24
 1b4:	79 0a       	sbc	r7, r25
	uint8_t hz2 = hz >> 1;
	hz2 &= ~0b11111110;
	uint8_t hz1 = hz & ~0b11111110;
	
	// IC2 clocken
	PORTA = 0x00;
 1b6:	1b ba       	out	0x1b, r1	; 27
	PORTA |= se8<<4 | se4<<7 | me8<<5 | he8<<6;
 1b8:	8b b3       	in	r24, 0x1b	; 27
 1ba:	e3 fb       	bst	r30, 3
 1bc:	aa 24       	eor	r10, r10
 1be:	a0 f8       	bld	r10, 0
 1c0:	b1 2c       	mov	r11, r1
 1c2:	aa 0c       	add	r10, r10
 1c4:	bb 1c       	adc	r11, r11
 1c6:	aa 0c       	add	r10, r10
 1c8:	bb 1c       	adc	r11, r11
 1ca:	aa 0c       	add	r10, r10
 1cc:	bb 1c       	adc	r11, r11
 1ce:	aa 0c       	add	r10, r10
 1d0:	bb 1c       	adc	r11, r11
 1d2:	e2 fb       	bst	r30, 2
 1d4:	cc 24       	eor	r12, r12
 1d6:	c0 f8       	bld	r12, 0
 1d8:	d1 2c       	mov	r13, r1
 1da:	d6 94       	lsr	r13
 1dc:	dc 2c       	mov	r13, r12
 1de:	cc 24       	eor	r12, r12
 1e0:	d7 94       	ror	r13
 1e2:	c7 94       	ror	r12
 1e4:	ca 28       	or	r12, r10
 1e6:	c8 2a       	or	r12, r24
 1e8:	43 fb       	bst	r20, 3
 1ea:	ee 24       	eor	r14, r14
 1ec:	e0 f8       	bld	r14, 0
 1ee:	f1 2c       	mov	r15, r1
 1f0:	ee 0c       	add	r14, r14
 1f2:	ff 1c       	adc	r15, r15
 1f4:	ee 0c       	add	r14, r14
 1f6:	ff 1c       	adc	r15, r15
 1f8:	ee 0c       	add	r14, r14
 1fa:	ff 1c       	adc	r15, r15
 1fc:	ee 0c       	add	r14, r14
 1fe:	ff 1c       	adc	r15, r15
 200:	ee 0c       	add	r14, r14
 202:	ff 1c       	adc	r15, r15
 204:	ec 28       	or	r14, r12
 206:	63 fa       	bst	r6, 3
 208:	44 24       	eor	r4, r4
 20a:	40 f8       	bld	r4, 0
 20c:	51 2c       	mov	r5, r1
 20e:	00 24       	eor	r0, r0
 210:	56 94       	lsr	r5
 212:	47 94       	ror	r4
 214:	07 94       	ror	r0
 216:	56 94       	lsr	r5
 218:	47 94       	ror	r4
 21a:	07 94       	ror	r0
 21c:	54 2c       	mov	r5, r4
 21e:	40 2c       	mov	r4, r0
 220:	4e 28       	or	r4, r14
 222:	4b ba       	out	0x1b, r4	; 27
	PORTC ^= 1<<2;
 224:	95 b3       	in	r25, 0x15	; 21
 226:	84 e0       	ldi	r24, 0x04	; 4
 228:	98 27       	eor	r25, r24
 22a:	95 bb       	out	0x15, r25	; 21
	PORTC ^= 1<<2;
 22c:	95 b3       	in	r25, 0x15	; 21
 22e:	89 27       	eor	r24, r25
 230:	85 bb       	out	0x15, r24	; 21
	PORTA = 0x00;
 232:	1b ba       	out	0x1b, r1	; 27
	
	
	// IC3 clocken
	PORTA = 0x00;
 234:	1b ba       	out	0x1b, r1	; 27
	PORTA |= se2<<4 | sz4 | sz2<<5 | me4<<1 | mz4<<2 | he4<<3 | me2<<6 | hz2<<7;
 236:	8b b3       	in	r24, 0x1b	; 27
	se2 &= ~0b11111110;
	uint8_t se1 = se & ~0b11111110;
	
	// LED status bestimmen Sekunden Zehner
	uint8_t sz4 = sz >> 2;
	sz4 &= ~0b11111110;
 238:	02 fb       	bst	r16, 2
 23a:	22 27       	eor	r18, r18
 23c:	20 f9       	bld	r18, 0
	PORTA = 0x00;
	
	
	// IC3 clocken
	PORTA = 0x00;
	PORTA |= se2<<4 | sz4 | sz2<<5 | me4<<1 | mz4<<2 | he4<<3 | me2<<6 | hz2<<7;
 23e:	28 2b       	or	r18, r24
 240:	e1 fb       	bst	r30, 1
 242:	22 24       	eor	r2, r2
 244:	20 f8       	bld	r2, 0
 246:	31 2c       	mov	r3, r1
 248:	22 0c       	add	r2, r2
 24a:	33 1c       	adc	r3, r3
 24c:	22 0c       	add	r2, r2
 24e:	33 1c       	adc	r3, r3
 250:	22 0c       	add	r2, r2
 252:	33 1c       	adc	r3, r3
 254:	22 0c       	add	r2, r2
 256:	33 1c       	adc	r3, r3
 258:	22 2a       	or	r2, r18
 25a:	01 fb       	bst	r16, 1
 25c:	88 27       	eor	r24, r24
 25e:	80 f9       	bld	r24, 0
 260:	89 83       	std	Y+1, r24	; 0x01
 262:	1a 82       	std	Y+2, r1	; 0x02
 264:	29 81       	ldd	r18, Y+1	; 0x01
 266:	3a 81       	ldd	r19, Y+2	; 0x02
 268:	22 0f       	add	r18, r18
 26a:	33 1f       	adc	r19, r19
 26c:	22 95       	swap	r18
 26e:	32 95       	swap	r19
 270:	30 7f       	andi	r19, 0xF0	; 240
 272:	32 27       	eor	r19, r18
 274:	20 7f       	andi	r18, 0xF0	; 240
 276:	32 27       	eor	r19, r18
 278:	22 29       	or	r18, r2
 27a:	42 fb       	bst	r20, 2
 27c:	99 27       	eor	r25, r25
 27e:	90 f9       	bld	r25, 0
 280:	9b 83       	std	Y+3, r25	; 0x03
 282:	1c 82       	std	Y+4, r1	; 0x04
 284:	8b 81       	ldd	r24, Y+3	; 0x03
 286:	9c 81       	ldd	r25, Y+4	; 0x04
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	82 2b       	or	r24, r18
 28e:	69 8d       	ldd	r22, Y+25	; 0x19
 290:	64 70       	andi	r22, 0x04	; 4
 292:	86 2b       	or	r24, r22
 294:	62 fa       	bst	r6, 2
 296:	aa 27       	eor	r26, r26
 298:	a0 f9       	bld	r26, 0
 29a:	ad 83       	std	Y+5, r26	; 0x05
 29c:	1e 82       	std	Y+6, r1	; 0x06
 29e:	6d 81       	ldd	r22, Y+5	; 0x05
 2a0:	7e 81       	ldd	r23, Y+6	; 0x06
 2a2:	66 0f       	add	r22, r22
 2a4:	77 1f       	adc	r23, r23
 2a6:	66 0f       	add	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	66 0f       	add	r22, r22
 2ac:	77 1f       	adc	r23, r23
 2ae:	68 2b       	or	r22, r24
 2b0:	41 fb       	bst	r20, 1
 2b2:	bb 27       	eor	r27, r27
 2b4:	b0 f9       	bld	r27, 0
 2b6:	bf 83       	std	Y+7, r27	; 0x07
 2b8:	18 86       	std	Y+8, r1	; 0x08
 2ba:	2f 81       	ldd	r18, Y+7	; 0x07
 2bc:	38 85       	ldd	r19, Y+8	; 0x08
 2be:	00 24       	eor	r0, r0
 2c0:	36 95       	lsr	r19
 2c2:	27 95       	ror	r18
 2c4:	07 94       	ror	r0
 2c6:	36 95       	lsr	r19
 2c8:	27 95       	ror	r18
 2ca:	07 94       	ror	r0
 2cc:	32 2f       	mov	r19, r18
 2ce:	20 2d       	mov	r18, r0
 2d0:	26 2b       	or	r18, r22
 2d2:	81 fa       	bst	r8, 1
 2d4:	88 27       	eor	r24, r24
 2d6:	80 f9       	bld	r24, 0
 2d8:	89 87       	std	Y+9, r24	; 0x09
 2da:	1a 86       	std	Y+10, r1	; 0x0a
 2dc:	89 85       	ldd	r24, Y+9	; 0x09
 2de:	9a 85       	ldd	r25, Y+10	; 0x0a
 2e0:	96 95       	lsr	r25
 2e2:	98 2f       	mov	r25, r24
 2e4:	88 27       	eor	r24, r24
 2e6:	97 95       	ror	r25
 2e8:	87 95       	ror	r24
 2ea:	82 2b       	or	r24, r18
 2ec:	8b bb       	out	0x1b, r24	; 27
	PORTC ^= 1<<1;
 2ee:	95 b3       	in	r25, 0x15	; 21
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	98 27       	eor	r25, r24
 2f4:	95 bb       	out	0x15, r25	; 21
	PORTC ^= 1<<1;
 2f6:	95 b3       	in	r25, 0x15	; 21
 2f8:	89 27       	eor	r24, r25
 2fa:	85 bb       	out	0x15, r24	; 21
	PORTA = 0x00;
 2fc:	1b ba       	out	0x1b, r1	; 27
	
	// IC4 clocken
	PORTA = 0x00;
 2fe:	1b ba       	out	0x1b, r1	; 27
	PORTA |= se1 | sz1<<1 | me1<<2 | mz1<<3 | he1<<4 | hz1<<5 | mz2<<6 | he2<<7;
 300:	8b b3       	in	r24, 0x1b	; 27
	se8 &= ~0b11111110;
	uint8_t se4 = se >> 2;
	se4 &= ~0b11111110;
	uint8_t se2 = se >> 1;
	se2 &= ~0b11111110;
	uint8_t se1 = se & ~0b11111110;
 302:	e1 70       	andi	r30, 0x01	; 1
	PORTC ^= 1<<1;
	PORTA = 0x00;
	
	// IC4 clocken
	PORTA = 0x00;
	PORTA |= se1 | sz1<<1 | me1<<2 | mz1<<3 | he1<<4 | hz1<<5 | mz2<<6 | he2<<7;
 304:	e8 2b       	or	r30, r24
 306:	90 2f       	mov	r25, r16
 308:	91 70       	andi	r25, 0x01	; 1
 30a:	9b 87       	std	Y+11, r25	; 0x0b
 30c:	1c 86       	std	Y+12, r1	; 0x0c
 30e:	8b 85       	ldd	r24, Y+11	; 0x0b
 310:	9c 85       	ldd	r25, Y+12	; 0x0c
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	8e 2b       	or	r24, r30
 318:	a4 2f       	mov	r26, r20
 31a:	a1 70       	andi	r26, 0x01	; 1
 31c:	ad 87       	std	Y+13, r26	; 0x0d
 31e:	1e 86       	std	Y+14, r1	; 0x0e
 320:	4d 85       	ldd	r20, Y+13	; 0x0d
 322:	5e 85       	ldd	r21, Y+14	; 0x0e
 324:	44 0f       	add	r20, r20
 326:	55 1f       	adc	r21, r21
 328:	44 0f       	add	r20, r20
 32a:	55 1f       	adc	r21, r21
 32c:	48 2b       	or	r20, r24
 32e:	b9 8d       	ldd	r27, Y+25	; 0x19
 330:	b1 70       	andi	r27, 0x01	; 1
 332:	bf 87       	std	Y+15, r27	; 0x0f
 334:	18 8a       	std	Y+16, r1	; 0x10
 336:	2f 85       	ldd	r18, Y+15	; 0x0f
 338:	38 89       	ldd	r19, Y+16	; 0x10
 33a:	22 0f       	add	r18, r18
 33c:	33 1f       	adc	r19, r19
 33e:	22 0f       	add	r18, r18
 340:	33 1f       	adc	r19, r19
 342:	22 0f       	add	r18, r18
 344:	33 1f       	adc	r19, r19
 346:	24 2b       	or	r18, r20
 348:	e6 2d       	mov	r30, r6
 34a:	e1 70       	andi	r30, 0x01	; 1
 34c:	e9 8b       	std	Y+17, r30	; 0x11
 34e:	1a 8a       	std	Y+18, r1	; 0x12
 350:	89 89       	ldd	r24, Y+17	; 0x11
 352:	9a 89       	ldd	r25, Y+18	; 0x12
 354:	82 95       	swap	r24
 356:	92 95       	swap	r25
 358:	90 7f       	andi	r25, 0xF0	; 240
 35a:	98 27       	eor	r25, r24
 35c:	80 7f       	andi	r24, 0xF0	; 240
 35e:	98 27       	eor	r25, r24
 360:	82 2b       	or	r24, r18
 362:	f8 2d       	mov	r31, r8
 364:	f1 70       	andi	r31, 0x01	; 1
 366:	fb 8b       	std	Y+19, r31	; 0x13
 368:	1c 8a       	std	Y+20, r1	; 0x14
 36a:	4b 89       	ldd	r20, Y+19	; 0x13
 36c:	5c 89       	ldd	r21, Y+20	; 0x14
 36e:	44 0f       	add	r20, r20
 370:	55 1f       	adc	r21, r21
 372:	42 95       	swap	r20
 374:	52 95       	swap	r21
 376:	50 7f       	andi	r21, 0xF0	; 240
 378:	54 27       	eor	r21, r20
 37a:	40 7f       	andi	r20, 0xF0	; 240
 37c:	54 27       	eor	r21, r20
 37e:	48 2b       	or	r20, r24
 380:	89 8d       	ldd	r24, Y+25	; 0x19
 382:	86 95       	lsr	r24
 384:	81 70       	andi	r24, 0x01	; 1
 386:	8d 8b       	std	Y+21, r24	; 0x15
 388:	1e 8a       	std	Y+22, r1	; 0x16
 38a:	2d 89       	ldd	r18, Y+21	; 0x15
 38c:	3e 89       	ldd	r19, Y+22	; 0x16
 38e:	00 24       	eor	r0, r0
 390:	36 95       	lsr	r19
 392:	27 95       	ror	r18
 394:	07 94       	ror	r0
 396:	36 95       	lsr	r19
 398:	27 95       	ror	r18
 39a:	07 94       	ror	r0
 39c:	32 2f       	mov	r19, r18
 39e:	20 2d       	mov	r18, r0
 3a0:	24 2b       	or	r18, r20
 3a2:	61 fa       	bst	r6, 1
 3a4:	99 27       	eor	r25, r25
 3a6:	90 f9       	bld	r25, 0
 3a8:	9f 8b       	std	Y+23, r25	; 0x17
 3aa:	18 8e       	std	Y+24, r1	; 0x18
 3ac:	8f 89       	ldd	r24, Y+23	; 0x17
 3ae:	98 8d       	ldd	r25, Y+24	; 0x18
 3b0:	96 95       	lsr	r25
 3b2:	98 2f       	mov	r25, r24
 3b4:	88 27       	eor	r24, r24
 3b6:	97 95       	ror	r25
 3b8:	87 95       	ror	r24
 3ba:	82 2b       	or	r24, r18
 3bc:	8b bb       	out	0x1b, r24	; 27
	PORTC ^= 1;
 3be:	95 b3       	in	r25, 0x15	; 21
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	98 27       	eor	r25, r24
 3c4:	95 bb       	out	0x15, r25	; 21
	PORTC ^= 1;
 3c6:	95 b3       	in	r25, 0x15	; 21
 3c8:	89 27       	eor	r24, r25
 3ca:	85 bb       	out	0x15, r24	; 21
	PORTA = 0x00;	
 3cc:	1b ba       	out	0x1b, r1	; 27
}
 3ce:	6a 96       	adiw	r28, 0x1a	; 26
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	f8 94       	cli
 3d4:	de bf       	out	0x3e, r29	; 62
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	cd bf       	out	0x3d, r28	; 61
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	1f 91       	pop	r17
 3e0:	0f 91       	pop	r16
 3e2:	ff 90       	pop	r15
 3e4:	ef 90       	pop	r14
 3e6:	df 90       	pop	r13
 3e8:	cf 90       	pop	r12
 3ea:	bf 90       	pop	r11
 3ec:	af 90       	pop	r10
 3ee:	9f 90       	pop	r9
 3f0:	8f 90       	pop	r8
 3f2:	7f 90       	pop	r7
 3f4:	6f 90       	pop	r6
 3f6:	5f 90       	pop	r5
 3f8:	4f 90       	pop	r4
 3fa:	3f 90       	pop	r3
 3fc:	2f 90       	pop	r2
 3fe:	08 95       	ret

00000400 <main>:


int main(void)
{
	DDRA = 0xff;
 400:	8f ef       	ldi	r24, 0xFF	; 255
 402:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0b11100000;
 404:	90 ee       	ldi	r25, 0xE0	; 224
 406:	97 bb       	out	0x17, r25	; 23
	DDRC = 0xff;
 408:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b10111111;
 40a:	9f eb       	ldi	r25, 0xBF	; 191
 40c:	91 bb       	out	0x11, r25	; 17
	
	PORTA = 0xff;
 40e:	8b bb       	out	0x1b, r24	; 27
	PORTB = 0b00011111;
 410:	8f e1       	ldi	r24, 0x1F	; 31
 412:	88 bb       	out	0x18, r24	; 24
	PORTC = 0x00;
 414:	15 ba       	out	0x15, r1	; 21
	PORTD = 0b11000000;
 416:	80 ec       	ldi	r24, 0xC0	; 192
 418:	82 bb       	out	0x12, r24	; 18
	
	// D-Latch Clocken (leeren/initialisieren)
	PORTA = 0x00;
 41a:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0b00000111;
 41c:	87 e0       	ldi	r24, 0x07	; 7
 41e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 420:	2f ef       	ldi	r18, 0xFF	; 255
 422:	40 e7       	ldi	r20, 0x70	; 112
 424:	52 e0       	ldi	r21, 0x02	; 2
 426:	21 50       	subi	r18, 0x01	; 1
 428:	40 40       	sbci	r20, 0x00	; 0
 42a:	50 40       	sbci	r21, 0x00	; 0
 42c:	e1 f7       	brne	.-8      	; 0x426 <main+0x26>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <main+0x30>
 430:	00 00       	nop
	_delay_ms(100);
	PORTC = 0b00000000;
 432:	15 ba       	out	0x15, r1	; 21
	//PORTC ^= 0b00000001;
	

	
	
	sei();
 434:	78 94       	sei
	
	TCCR1B |= 1<<CS12 | 1<<WGM12;
 436:	8e b5       	in	r24, 0x2e	; 46
 438:	8c 60       	ori	r24, 0x0C	; 12
 43a:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= 1<<OCIE1A;
 43c:	89 b7       	in	r24, 0x39	; 57
 43e:	80 61       	ori	r24, 0x10	; 16
 440:	89 bf       	out	0x39, r24	; 57
	OCR1A = 31250-1;
 442:	81 e1       	ldi	r24, 0x11	; 17
 444:	9a e7       	ldi	r25, 0x7A	; 122
 446:	9b bd       	out	0x2b, r25	; 43
 448:	8a bd       	out	0x2a, r24	; 42
	
    while(1)
    {
        //_delay_ms(1000);
		//toggleLED();
		if (bit_is_set(statusReg, updateBit) == 1)
 44a:	c1 e0       	ldi	r28, 0x01	; 1
 44c:	d0 e0       	ldi	r29, 0x00	; 0
				{
					stunde--;
				}
				else
				{
					stunde = 23;
 44e:	0f 2e       	mov	r0, r31
 450:	f7 e1       	ldi	r31, 0x17	; 23
 452:	ef 2e       	mov	r14, r31
 454:	f1 2c       	mov	r15, r1
 456:	f0 2d       	mov	r31, r0
				{
					minute--;
				}
				else
				{
					minute = 59;
 458:	0b e3       	ldi	r16, 0x3B	; 59
 45a:	10 e0       	ldi	r17, 0x00	; 0
	
    while(1)
    {
        //_delay_ms(1000);
		//toggleLED();
		if (bit_is_set(statusReg, updateBit) == 1)
 45c:	80 91 69 00 	lds	r24, 0x0069
 460:	20 91 68 00 	lds	r18, 0x0068
 464:	ae 01       	movw	r20, r28
 466:	02 c0       	rjmp	.+4      	; 0x46c <main+0x6c>
 468:	44 0f       	add	r20, r20
 46a:	55 1f       	adc	r21, r21
 46c:	2a 95       	dec	r18
 46e:	e2 f7       	brpl	.-8      	; 0x468 <main+0x68>
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	84 23       	and	r24, r20
 474:	95 23       	and	r25, r21
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	89 f4       	brne	.+34     	; 0x49c <main+0x9c>
		{
			encodeLed();
 47a:	0e 94 49 00 	call	0x92	; 0x92 <encodeLed>
			statusReg &= ~(1<<updateBit);
 47e:	80 91 68 00 	lds	r24, 0x0068
 482:	20 91 69 00 	lds	r18, 0x0069
 486:	ae 01       	movw	r20, r28
 488:	02 c0       	rjmp	.+4      	; 0x48e <main+0x8e>
 48a:	44 0f       	add	r20, r20
 48c:	55 1f       	adc	r21, r21
 48e:	8a 95       	dec	r24
 490:	e2 f7       	brpl	.-8      	; 0x48a <main+0x8a>
 492:	ca 01       	movw	r24, r20
 494:	80 95       	com	r24
 496:	82 23       	and	r24, r18
 498:	80 93 69 00 	sts	0x0069, r24
		}
		
		
		// ========= Setting Hour + =============
		if ( !( PINB & (1<<PINB3) ) )	// When pulled to LOW by pressibng button
 49c:	b3 99       	sbic	0x16, 3	; 22
 49e:	2f c0       	rjmp	.+94     	; 0x4fe <main+0xfe>
		{
			if (bit_is_clear(statusReg, button2Bit)) // When previously not pressed
 4a0:	80 91 69 00 	lds	r24, 0x0069
 4a4:	20 91 62 00 	lds	r18, 0x0062
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <main+0xb0>
 4ac:	95 95       	asr	r25
 4ae:	87 95       	ror	r24
 4b0:	2a 95       	dec	r18
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <main+0xac>
 4b4:	80 fd       	sbrc	r24, 0
 4b6:	32 c0       	rjmp	.+100    	; 0x51c <main+0x11c>
			{
				if (stunde < 23)
 4b8:	80 91 64 00 	lds	r24, 0x0064
 4bc:	90 91 65 00 	lds	r25, 0x0065
 4c0:	47 97       	sbiw	r24, 0x17	; 23
 4c2:	50 f4       	brcc	.+20     	; 0x4d8 <main+0xd8>
				{
					stunde++;
 4c4:	80 91 64 00 	lds	r24, 0x0064
 4c8:	90 91 65 00 	lds	r25, 0x0065
 4cc:	01 96       	adiw	r24, 0x01	; 1
 4ce:	90 93 65 00 	sts	0x0065, r25
 4d2:	80 93 64 00 	sts	0x0064, r24
 4d6:	04 c0       	rjmp	.+8      	; 0x4e0 <main+0xe0>
				}
				else
				{
					stunde = 0;
 4d8:	10 92 65 00 	sts	0x0065, r1
 4dc:	10 92 64 00 	sts	0x0064, r1
				}
				statusReg |= 1<<button2Bit; // Button was pressed
 4e0:	80 91 62 00 	lds	r24, 0x0062
 4e4:	20 91 69 00 	lds	r18, 0x0069
 4e8:	ae 01       	movw	r20, r28
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <main+0xf0>
 4ec:	44 0f       	add	r20, r20
 4ee:	55 1f       	adc	r21, r21
 4f0:	8a 95       	dec	r24
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <main+0xec>
 4f4:	ca 01       	movw	r24, r20
 4f6:	82 2b       	or	r24, r18
 4f8:	80 93 69 00 	sts	0x0069, r24
 4fc:	0f c0       	rjmp	.+30     	; 0x51c <main+0x11c>
			}
		}
		else
		{
			statusReg &= ~(1<<button2Bit); // Button was pressed
 4fe:	80 91 62 00 	lds	r24, 0x0062
 502:	20 91 69 00 	lds	r18, 0x0069
 506:	ae 01       	movw	r20, r28
 508:	02 c0       	rjmp	.+4      	; 0x50e <main+0x10e>
 50a:	44 0f       	add	r20, r20
 50c:	55 1f       	adc	r21, r21
 50e:	8a 95       	dec	r24
 510:	e2 f7       	brpl	.-8      	; 0x50a <main+0x10a>
 512:	ca 01       	movw	r24, r20
 514:	80 95       	com	r24
 516:	82 23       	and	r24, r18
 518:	80 93 69 00 	sts	0x0069, r24
		}
		// ==================================
		
		
		// ========= Setting Hour - =============
		if ( !( PINB & (1<<PINB4) ) )	// When pulled to LOW by pressibng button
 51c:	b4 99       	sbic	0x16, 4	; 22
 51e:	2f c0       	rjmp	.+94     	; 0x57e <main+0x17e>
		{
			if (bit_is_clear(statusReg, button1Bit)) // When previously not pressed
 520:	80 91 69 00 	lds	r24, 0x0069
 524:	20 91 63 00 	lds	r18, 0x0063
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	02 c0       	rjmp	.+4      	; 0x530 <main+0x130>
 52c:	95 95       	asr	r25
 52e:	87 95       	ror	r24
 530:	2a 95       	dec	r18
 532:	e2 f7       	brpl	.-8      	; 0x52c <main+0x12c>
 534:	80 fd       	sbrc	r24, 0
 536:	32 c0       	rjmp	.+100    	; 0x59c <main+0x19c>
			{
				if (stunde > 1)
 538:	80 91 64 00 	lds	r24, 0x0064
 53c:	90 91 65 00 	lds	r25, 0x0065
 540:	02 97       	sbiw	r24, 0x02	; 2
 542:	50 f0       	brcs	.+20     	; 0x558 <main+0x158>
				{
					stunde--;
 544:	80 91 64 00 	lds	r24, 0x0064
 548:	90 91 65 00 	lds	r25, 0x0065
 54c:	01 97       	sbiw	r24, 0x01	; 1
 54e:	90 93 65 00 	sts	0x0065, r25
 552:	80 93 64 00 	sts	0x0064, r24
 556:	04 c0       	rjmp	.+8      	; 0x560 <main+0x160>
				}
				else
				{
					stunde = 23;
 558:	f0 92 65 00 	sts	0x0065, r15
 55c:	e0 92 64 00 	sts	0x0064, r14
				}
				statusReg |= 1<<button1Bit; // Button was pressed
 560:	80 91 63 00 	lds	r24, 0x0063
 564:	20 91 69 00 	lds	r18, 0x0069
 568:	ae 01       	movw	r20, r28
 56a:	02 c0       	rjmp	.+4      	; 0x570 <main+0x170>
 56c:	44 0f       	add	r20, r20
 56e:	55 1f       	adc	r21, r21
 570:	8a 95       	dec	r24
 572:	e2 f7       	brpl	.-8      	; 0x56c <main+0x16c>
 574:	ca 01       	movw	r24, r20
 576:	82 2b       	or	r24, r18
 578:	80 93 69 00 	sts	0x0069, r24
 57c:	0f c0       	rjmp	.+30     	; 0x59c <main+0x19c>
			}
		}
		else
		{
			statusReg &= ~(1<<button1Bit); // Button was pressed
 57e:	80 91 63 00 	lds	r24, 0x0063
 582:	20 91 69 00 	lds	r18, 0x0069
 586:	ae 01       	movw	r20, r28
 588:	02 c0       	rjmp	.+4      	; 0x58e <main+0x18e>
 58a:	44 0f       	add	r20, r20
 58c:	55 1f       	adc	r21, r21
 58e:	8a 95       	dec	r24
 590:	e2 f7       	brpl	.-8      	; 0x58a <main+0x18a>
 592:	ca 01       	movw	r24, r20
 594:	80 95       	com	r24
 596:	82 23       	and	r24, r18
 598:	80 93 69 00 	sts	0x0069, r24
		}
		// ==================================
				

		// ========= Setting Minuten + =============
		if ( !( PINB & (1<<PINB1) ) )	// When pulled to LOW by pressibng button
 59c:	b1 99       	sbic	0x16, 1	; 22
 59e:	35 c0       	rjmp	.+106    	; 0x60a <main+0x20a>
		{
			if (bit_is_clear(statusReg, button4Bit)) // When previously not pressed
 5a0:	80 91 69 00 	lds	r24, 0x0069
 5a4:	20 91 60 00 	lds	r18, 0x0060
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <main+0x1b0>
 5ac:	95 95       	asr	r25
 5ae:	87 95       	ror	r24
 5b0:	2a 95       	dec	r18
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <main+0x1ac>
 5b4:	80 fd       	sbrc	r24, 0
 5b6:	38 c0       	rjmp	.+112    	; 0x628 <main+0x228>
			{
				if (minute < 59)
 5b8:	80 91 66 00 	lds	r24, 0x0066
 5bc:	90 91 67 00 	lds	r25, 0x0067
 5c0:	cb 97       	sbiw	r24, 0x3b	; 59
 5c2:	50 f4       	brcc	.+20     	; 0x5d8 <main+0x1d8>
				{
					minute++;
 5c4:	80 91 66 00 	lds	r24, 0x0066
 5c8:	90 91 67 00 	lds	r25, 0x0067
 5cc:	01 96       	adiw	r24, 0x01	; 1
 5ce:	90 93 67 00 	sts	0x0067, r25
 5d2:	80 93 66 00 	sts	0x0066, r24
 5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <main+0x1e0>
				}
				else
				{
					minute = 0;
 5d8:	10 92 67 00 	sts	0x0067, r1
 5dc:	10 92 66 00 	sts	0x0066, r1
				}
				sekunde = 0;
 5e0:	10 92 6b 00 	sts	0x006B, r1
 5e4:	10 92 6a 00 	sts	0x006A, r1
				TCNT1H = 0x00;
 5e8:	1d bc       	out	0x2d, r1	; 45
				TCNT1L = 0x00;
 5ea:	1c bc       	out	0x2c, r1	; 44
				statusReg |= 1<<button4Bit; // Button was pressed
 5ec:	80 91 60 00 	lds	r24, 0x0060
 5f0:	20 91 69 00 	lds	r18, 0x0069
 5f4:	ae 01       	movw	r20, r28
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <main+0x1fc>
 5f8:	44 0f       	add	r20, r20
 5fa:	55 1f       	adc	r21, r21
 5fc:	8a 95       	dec	r24
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <main+0x1f8>
 600:	ca 01       	movw	r24, r20
 602:	82 2b       	or	r24, r18
 604:	80 93 69 00 	sts	0x0069, r24
 608:	0f c0       	rjmp	.+30     	; 0x628 <main+0x228>
			}
		}
		else
		{
			statusReg &= ~(1<<button4Bit); // Button was pressed
 60a:	80 91 60 00 	lds	r24, 0x0060
 60e:	20 91 69 00 	lds	r18, 0x0069
 612:	ae 01       	movw	r20, r28
 614:	02 c0       	rjmp	.+4      	; 0x61a <main+0x21a>
 616:	44 0f       	add	r20, r20
 618:	55 1f       	adc	r21, r21
 61a:	8a 95       	dec	r24
 61c:	e2 f7       	brpl	.-8      	; 0x616 <main+0x216>
 61e:	ca 01       	movw	r24, r20
 620:	80 95       	com	r24
 622:	82 23       	and	r24, r18
 624:	80 93 69 00 	sts	0x0069, r24
		}
		// ==================================


		// ========= Setting Minuten - =============
		if ( !( PINB & (1<<PINB2) ) )	// When pulled to LOW by pressibng button
 628:	b2 99       	sbic	0x16, 2	; 22
 62a:	33 c0       	rjmp	.+102    	; 0x692 <main+0x292>
		{
			if (bit_is_clear(statusReg, button3Bit)) // When previously not pressed
 62c:	80 91 69 00 	lds	r24, 0x0069
 630:	20 91 61 00 	lds	r18, 0x0061
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	02 c0       	rjmp	.+4      	; 0x63c <main+0x23c>
 638:	95 95       	asr	r25
 63a:	87 95       	ror	r24
 63c:	2a 95       	dec	r18
 63e:	e2 f7       	brpl	.-8      	; 0x638 <main+0x238>
 640:	80 fd       	sbrc	r24, 0
 642:	36 c0       	rjmp	.+108    	; 0x6b0 <main+0x2b0>
			{
				if (minute > 1)
 644:	80 91 66 00 	lds	r24, 0x0066
 648:	90 91 67 00 	lds	r25, 0x0067
 64c:	02 97       	sbiw	r24, 0x02	; 2
 64e:	50 f0       	brcs	.+20     	; 0x664 <main+0x264>
				{
					minute--;
 650:	80 91 66 00 	lds	r24, 0x0066
 654:	90 91 67 00 	lds	r25, 0x0067
 658:	01 97       	sbiw	r24, 0x01	; 1
 65a:	90 93 67 00 	sts	0x0067, r25
 65e:	80 93 66 00 	sts	0x0066, r24
 662:	04 c0       	rjmp	.+8      	; 0x66c <main+0x26c>
				}
				else
				{
					minute = 59;
 664:	10 93 67 00 	sts	0x0067, r17
 668:	00 93 66 00 	sts	0x0066, r16
				}
				sekunde = 0;
 66c:	10 92 6b 00 	sts	0x006B, r1
 670:	10 92 6a 00 	sts	0x006A, r1
				statusReg |= 1<<button3Bit; // Button was pressed
 674:	80 91 61 00 	lds	r24, 0x0061
 678:	20 91 69 00 	lds	r18, 0x0069
 67c:	ae 01       	movw	r20, r28
 67e:	02 c0       	rjmp	.+4      	; 0x684 <main+0x284>
 680:	44 0f       	add	r20, r20
 682:	55 1f       	adc	r21, r21
 684:	8a 95       	dec	r24
 686:	e2 f7       	brpl	.-8      	; 0x680 <main+0x280>
 688:	ca 01       	movw	r24, r20
 68a:	82 2b       	or	r24, r18
 68c:	80 93 69 00 	sts	0x0069, r24
 690:	0f c0       	rjmp	.+30     	; 0x6b0 <main+0x2b0>
			}
		}
		else
		{
			statusReg &= ~(1<<button3Bit); // Button was pressed
 692:	80 91 61 00 	lds	r24, 0x0061
 696:	20 91 69 00 	lds	r18, 0x0069
 69a:	ae 01       	movw	r20, r28
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <main+0x2a2>
 69e:	44 0f       	add	r20, r20
 6a0:	55 1f       	adc	r21, r21
 6a2:	8a 95       	dec	r24
 6a4:	e2 f7       	brpl	.-8      	; 0x69e <main+0x29e>
 6a6:	ca 01       	movw	r24, r20
 6a8:	80 95       	com	r24
 6aa:	82 23       	and	r24, r18
 6ac:	80 93 69 00 	sts	0x0069, r24
		}
		// ==================================
				
		encodeLed();
 6b0:	0e 94 49 00 	call	0x92	; 0x92 <encodeLed>
    }
 6b4:	d3 ce       	rjmp	.-602    	; 0x45c <main+0x5c>

000006b6 <__vector_7>:
}


ISR (TIMER1_COMPA_vect)
{
 6b6:	1f 92       	push	r1
 6b8:	0f 92       	push	r0
 6ba:	0f b6       	in	r0, 0x3f	; 63
 6bc:	0f 92       	push	r0
 6be:	11 24       	eor	r1, r1
 6c0:	2f 93       	push	r18
 6c2:	3f 93       	push	r19
 6c4:	4f 93       	push	r20
 6c6:	6f 93       	push	r22
 6c8:	7f 93       	push	r23
 6ca:	8f 93       	push	r24
 6cc:	9f 93       	push	r25
	sekunde++;
 6ce:	80 91 6a 00 	lds	r24, 0x006A
 6d2:	90 91 6b 00 	lds	r25, 0x006B
 6d6:	01 96       	adiw	r24, 0x01	; 1
 6d8:	90 93 6b 00 	sts	0x006B, r25
 6dc:	80 93 6a 00 	sts	0x006A, r24
	if(sekunde == 60)
 6e0:	80 91 6a 00 	lds	r24, 0x006A
 6e4:	90 91 6b 00 	lds	r25, 0x006B
 6e8:	cc 97       	sbiw	r24, 0x3c	; 60
 6ea:	69 f4       	brne	.+26     	; 0x706 <__vector_7+0x50>
	{
		minute++;
 6ec:	80 91 66 00 	lds	r24, 0x0066
 6f0:	90 91 67 00 	lds	r25, 0x0067
 6f4:	01 96       	adiw	r24, 0x01	; 1
 6f6:	90 93 67 00 	sts	0x0067, r25
 6fa:	80 93 66 00 	sts	0x0066, r24
		sekunde = 0;
 6fe:	10 92 6b 00 	sts	0x006B, r1
 702:	10 92 6a 00 	sts	0x006A, r1
	}
	if(minute == 60)
 706:	80 91 66 00 	lds	r24, 0x0066
 70a:	90 91 67 00 	lds	r25, 0x0067
 70e:	cc 97       	sbiw	r24, 0x3c	; 60
 710:	69 f4       	brne	.+26     	; 0x72c <__vector_7+0x76>
	{
		stunde++;
 712:	80 91 64 00 	lds	r24, 0x0064
 716:	90 91 65 00 	lds	r25, 0x0065
 71a:	01 96       	adiw	r24, 0x01	; 1
 71c:	90 93 65 00 	sts	0x0065, r25
 720:	80 93 64 00 	sts	0x0064, r24
		minute = 0;
 724:	10 92 67 00 	sts	0x0067, r1
 728:	10 92 66 00 	sts	0x0066, r1
	}
	if(stunde == 24)
 72c:	80 91 64 00 	lds	r24, 0x0064
 730:	90 91 65 00 	lds	r25, 0x0065
 734:	48 97       	sbiw	r24, 0x18	; 24
 736:	21 f4       	brne	.+8      	; 0x740 <__vector_7+0x8a>
	{
		stunde = 0;
 738:	10 92 65 00 	sts	0x0065, r1
 73c:	10 92 64 00 	sts	0x0064, r1
	}
	statusReg |= 1<<updateBit;
 740:	80 91 68 00 	lds	r24, 0x0068
 744:	40 91 69 00 	lds	r20, 0x0069
 748:	21 e0       	ldi	r18, 0x01	; 1
 74a:	30 e0       	ldi	r19, 0x00	; 0
 74c:	b9 01       	movw	r22, r18
 74e:	02 c0       	rjmp	.+4      	; 0x754 <__vector_7+0x9e>
 750:	66 0f       	add	r22, r22
 752:	77 1f       	adc	r23, r23
 754:	8a 95       	dec	r24
 756:	e2 f7       	brpl	.-8      	; 0x750 <__vector_7+0x9a>
 758:	cb 01       	movw	r24, r22
 75a:	84 2b       	or	r24, r20
 75c:	80 93 69 00 	sts	0x0069, r24
 760:	9f 91       	pop	r25
 762:	8f 91       	pop	r24
 764:	7f 91       	pop	r23
 766:	6f 91       	pop	r22
 768:	4f 91       	pop	r20
 76a:	3f 91       	pop	r19
 76c:	2f 91       	pop	r18
 76e:	0f 90       	pop	r0
 770:	0f be       	out	0x3f, r0	; 63
 772:	0f 90       	pop	r0
 774:	1f 90       	pop	r1
 776:	18 95       	reti

00000778 <__umulhisi3>:
 778:	a2 9f       	mul	r26, r18
 77a:	b0 01       	movw	r22, r0
 77c:	b3 9f       	mul	r27, r19
 77e:	c0 01       	movw	r24, r0
 780:	a3 9f       	mul	r26, r19
 782:	70 0d       	add	r23, r0
 784:	81 1d       	adc	r24, r1
 786:	11 24       	eor	r1, r1
 788:	91 1d       	adc	r25, r1
 78a:	b2 9f       	mul	r27, r18
 78c:	70 0d       	add	r23, r0
 78e:	81 1d       	adc	r24, r1
 790:	11 24       	eor	r1, r1
 792:	91 1d       	adc	r25, r1
 794:	08 95       	ret

00000796 <_exit>:
 796:	f8 94       	cli

00000798 <__stop_program>:
 798:	ff cf       	rjmp	.-2      	; 0x798 <__stop_program>
